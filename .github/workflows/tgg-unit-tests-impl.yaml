name: "[internal] TGG unit tests impl"

on:
  workflow_call:
    inputs:
      docker-image:
        required: true
        type: string
      wheel-artifact-name:
        required: true
        type: string

jobs:
  TGG-tests:
    strategy:
      fail-fast: false
      matrix:
        test-group: [
          {
            name: "TGG unit tests",
            arch: wormhole_b0,
            runs-on: ["arch-wormhole_b0", "config-tgg", "in-service", "bare-metal", "pipeline-functional"],
            cmd: './tests/scripts/run_tests.sh --tt-arch wormhole_b0 --pipeline-type unit_tgg_device --dispatch-mode ""'
          },
        ]
    name: ${{ matrix.test-group.name }}
    runs-on: ${{ matrix.test-group.runs-on }}
    container:
      image: ${{ inputs.docker-image }}
      env:
        TT_METAL_HOME: /work
        PYTHONPATH: /work
        LD_LIBRARY_PATH: /work/build/lib
        LOGURU_LEVEL: INFO
        ARCH_NAME: ${{ matrix.test-group.arch }}
        GITHUB_ACTIONS: true
        GTEST_OUTPUT: xml:/work/generated/test_reports/
      volumes:
        - ${{ github.workspace }}/docker-job:/work # Subdir to workaround https://github.com/actions/runner/issues/691
        - /dev/hugepages-1G:/dev/hugepages-1G
        - /mnt/MLPerf:/mnt/MLPerf
      options: "--device /dev/tenstorrent"
    defaults:
      run:
        shell: bash
        working-directory: /work # https://github.com/actions/runner/issues/878
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          path: docker-job # Here be dragons; keep it scoped to our desired volume, yet must be under github.workspace and be sure to clean up at the end
      - uses: actions/download-artifact@v4
        timeout-minutes: 10
        with:
          name: TTMetal_build_any
          path: /work
      - name: Extract files
        run: tar -xvf ttm_any.tar
      - name: ⬇️ Download Wheel
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.wheel-artifact-name }}
          path: /work
      - name: Install Wheel
        run: |
          WHEEL_FILENAME=$(ls -1 *.whl)
          pip3 install $WHEEL_FILENAME
      - name: Run unit regression tests
        timeout-minutes: 60
        run: |
          set -x
          pwd
          echo $PYTHONPATH
          ls -al
          mkdir -p /work/generated/test_reports
          ${{ matrix.test-group.cmd }}
      - uses: tenstorrent/tt-metal/.github/actions/upload-artifact-with-job-uuid@main
        timeout-minutes: 10
        if: ${{ !cancelled() }}
        with:
          path: |
            /work/generated/test_reports/
          prefix: "test_reports_"
      - name: Generate gtest annotations on failure
        uses: ./.github/actions/generate-gtest-failure-message
        if: ${{ failure() }}
        with:
          path: |
            generated/test_reports/
      - uses: tenstorrent/tt-metal/.github/actions/cleanup@main
        if: always()
