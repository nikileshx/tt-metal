name: "Build tt-metal artifacts"

on:
  workflow_call:
    inputs:
      build-type:
        required: false
        type: string
        default: "Release"
      tracy:
        required: false
        type: boolean
        default: false
        description: "Build with tracy enabled"
      build-wheel:
        required: false
        type: boolean
        default: false
        description: "Build Python Wheel"
      distro:
        required: false
        type: string
        default: "ubuntu"
      version:
        required: false
        type: string
        default: "20.04"
      architecture:
        required: false
        type: string
        default: "amd64"
      toolchain:
        required: false
        type: string
        default: "cmake/x86_64-linux-clang-17-libcpp-toolchain.cmake"
        description: "Toolchain file to use for build"
      publish-artifact:
        required: false
        type: boolean
        default: true
        # FIXME(afuller): We need to fix our artifact naming to avoid conflicts if we
        #     wish to make builds of differing types available in a single workflow.
        description: "Make resulting artifact available in the workflow"
      skip-tt-train:
        # FIXME: TT-Train needs to get fixed to not assume a specific toolchain.
        #        Fow now enabling an opt-out. But this should get removed.
        required: false
        type: boolean
        default: false
    outputs:
      ci-build-docker-image:
        description: "Docker tag for the CI Build Docker image for building TT-Metalium et al"
        value: ${{ jobs.build-docker-image.outputs.ci-build-tag }}
      #ci-test-docker-image:
      #  description: "Docker tag for the CI Test Docker image for testing TT-Metalium et al"
      #  value: ${{ jobs.build-docker-image.outputs.ci-test-tag }}


  workflow_dispatch:
    inputs:
      build-type:
        required: false
        type: string
        default: "Release"
      tracy:
        required: false
        type: boolean
        default: false
        description: "Build with tracy enabled"
      build-wheel:
        required: false
        type: boolean
        default: false
        description: "Build Python Wheel"
      distro:
        required: false
        type: string
        default: "ubuntu"
      version:
        required: false
        type: string
        default: "20.04"
      architecture:
        required: false
        type: string
        default: "amd64"
      toolchain:
        required: false
        type: string
        default: "cmake/x86_64-linux-clang-17-libcpp-toolchain.cmake"
        description: "Toolchain file to use for build"


jobs:
  build-docker-image:
    uses: ./.github/workflows/build-docker-artifact.yaml
    secrets: inherit
    with:
      distro: ${{ inputs.distro }}
      version: ${{ inputs.version }}
      architecture: ${{ inputs.architecture }}

  build-artifact:
    name: "🛠️ Build ${{ inputs.build-type }} ${{ inputs.distro }} ${{ inputs.version }}"
    needs: build-docker-image
    timeout-minutes: 30
    env:
      SILENT: 0
      VERBOSE: 1
      IMAGE_PARAMS: "${{ inputs.distro }}-${{ inputs.version }}-${{ inputs.architecture }}"
    runs-on:
      - build
      - in-service
    steps:
      - name: Verify ccache availability
        shell: bash
        run: |
          if [ ! -d "/mnt/MLPerf/ccache" ]; then
            echo "::error title=ccache-mlperf-not-mounted::NFS drive is not mounted; build machine not properly provisioned."
            exit 1
          fi
          if [ ! -d "$HOME/.ccache-ci" ]; then
            echo "::error title=ccache-not-provisioned::Ccache is not properly provisioned."
            exit 1
          fi
      - uses: tenstorrent/tt-metal/.github/actions/checkout-with-submodule-lfs@main
      - name: Set up dynamic env vars for build
        run: |
          echo "TT_METAL_HOME=$(pwd)" >> $GITHUB_ENV
          echo "RUNNER_UID=$(id -u)" >> $GITHUB_ENV
          echo "RUNNER_GID=$(id -g)" >> $GITHUB_ENV
      - name: Update submodules
        run: |
          git submodule update --init --recursive
      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Pull docker image
        run: docker pull ${{ needs.build-docker-image.outputs.ci-build-tag }}
      - name: Build tt-metal and libs
        uses: tenstorrent/docker-run-action@v5
        with:
          image: ${{ needs.build-docker-image.outputs.ci-build-tag }}
          options: |
            --rm
            --tmpfs /tmp
            -u ${{ env.RUNNER_UID }}:${{ env.RUNNER_GID }}
            --group-add 1457
            -v ${{ github.workspace }}:${{ github.workspace }}
            -v /etc/passwd:/etc/passwd:ro
            -v /etc/shadow:/etc/shadow:ro
            -v /etc/bashrc:/etc/bashrc:ro
            -v /home/ubuntu/.ccache-ci:/home/ubuntu/.ccache
            -v /mnt/MLPerf/ccache:/mnt/MLPerf/ccache
            -e CARGO_HOME=${{ github.workspace }}/.cargo
            -e TT_FROM_PRECOMPILED_DIR=${{ github.workspace }}
            -w ${{ github.workspace }}
          run: |
            set -eu # basic shell hygiene

            # /tmp is a tmpfs; more efficient than persisted storage
            mkdir -p /tmp/ccache
            export CCACHE_TEMPDIR=/tmp/ccache

            # Zero out the stats so we can see how we did this build
            # NOTE: may be inaccurate if we have >1 build runner on the same machine, using the same local cache
            ccache -z

            args_fixme=$([ "${{ inputs.skip-tt-train }}" = "true" ] && echo "--build-metal-tests --build-ttnn-tests --build-programming-examples" || echo "--build-all")
            echo "Args: ${args_fixme}"
            build_command="./build_metal.sh --build-type ${{ inputs.build-type }} --toolchain-path ${{ inputs.toolchain }} ${args_fixme} --enable-ccache"
            echo "Build tracy: ${{ inputs.tracy }}"
            if [ "${{ inputs.tracy }}" = "true" ]; then
              build_command="$build_command --enable-profiler"
            fi

            [ -n "$(find . -maxdepth 1 -type d -name 'build*' -print -quit)" ] &&
              { echo "!!! ALERT !!! This should never happen, but does explain an issue we've been hunting. Please send a link to this job to Metal Infra.  kthxbye."; exit 1; }

            nice -n 19 $build_command

            echo "Build wheel: ${{ inputs.build-wheel }}"
            if [ "${{ inputs.build-wheel }}" = "true" ]; then
              nice -n 19 python3 -m build
            fi
            ccache -s > build/ccache.stats
      - name: Upload distribution as artifact
        if: ${{ inputs.build-wheel }}
        uses: actions/upload-artifact@v4
        with:
          name: eager-dist-${{ inputs.distro }}-${{ inputs.version }}-any
          path: dist/
      - name: Publish Ccache summary
        run: |
          echo '## CCache Summary' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat build/ccache.stats >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
      - name: 'Tar files'
        if: ${{ inputs.publish-artifact }}
        run: tar -cvhf ttm_any.tar ttnn/ttnn/*.so build/lib ttnn/ttnn/*.so build/programming_examples build/test build/tools build/tt-train data runtime
      - name: 'Upload Artifact'
        if: ${{ inputs.publish-artifact }}
        uses: actions/upload-artifact@v4
        with:
          name: TTMetal_build_any${{ (inputs.tracy && '_profiler') || '' }}
          path: ttm_any.tar
