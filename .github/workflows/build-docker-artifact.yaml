name: "Build tt-metal docker artifact"

on:
  workflow_call:
    inputs:
      distro:
        required: false
        type: string
        default: "ubuntu"
      version:
        required: false
        type: string
        default: "20.04"
      architecture:
        required: false
        type: string
        default: "amd64"
    outputs:
      ci-build-tag:
        description: "Docker tag for the CI Build Docker image for building TT-Metalium et al"
        value: ${{ jobs.check-docker-images.outputs.ci-build-tag }}
      #ci-test-tag:
      #  description: "Docker tag for the CI Test Docker image for testing TT-Metalium et al"
      #  value: ${{ jobs.check-docker-images.outputs.ci-test-tag }}
  workflow_dispatch:
    inputs:
      distro:
        required: false
        type: choice
        default: "ubuntu"
        options:
            - "ubuntu"
      version:
        required: false
        type: choice
        default: "20.04"
        options:
            - "20.04"
            - "22.04"
            - "24.04"
      architecture:
        required: false
        type: choice
        default: "amd64"
        options:
            - "amd64"

env:
  IMAGE_NAME: ${{ inputs.distro }}-${{ inputs.version }}-${{ inputs.architecture }}

jobs:
  check-docker-images:
    runs-on: ubuntu-latest
    outputs:
      ci-build-exists: ${{ steps.images.outputs.ci-build-exists }}
      ci-build-tag: ${{ steps.tags.outputs.ci-build-tag }}
      # ci-test-exists: ${{ steps.images.outputs.ci-test-exists }}
      # ci-test-tag: ${{ steps.tags.outputs.ci-test-tag }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Compute tags
        id: tags
        run: |
          BUILD_TAG=$(cat \
            install_dependencies.sh \
            dockerfile/Dockerfile \
            tt_metal/python_env/requirements-dev.txt \
            docs/requirements-docs.txt \
            tests/sweep_framework/requirements-sweeps.txt \
            | sha1sum | cut -d' ' -f1)
          echo "ci-build-tag=ghcr.io/${{ github.repository }}/tt-metalium/${{ env.IMAGE_NAME }}:${BUILD_TAG}" >> $GITHUB_OUTPUT

          # TODO: When we have multiple Docker images, do something like this:
          # TEST_TAG=$(cat tt_metal/python_env/requirements-dev.txt pyproject.toml | sha1sum | cut -d' ' -f1)
          # echo "ci-test-tag=ghcr.io/${{ github.repository }}/tt-metalium/${{ env.IMAGE_NAME }}:${TEST_TAG}" >> $GITHUB_OUTPUT

      - name: Query images exist
        id: images
        run: |
          if docker manifest inspect ${{ steps.tags.outputs.ci-build-tag }} > /dev/null 2>&1; then
            echo "${{ steps.tags.outputs.ci-build-tag }} exists"
            echo "ci-build-exists=true" >> $GITHUB_OUTPUT
          else
            echo "${{ steps.tags.outputs.ci-build-tag }} does not exist"
            echo "ci-build-exists=false" >> $GITHUB_OUTPUT
          fi


  build-docker-image:
    name: "üê≥Ô∏è Build image"
    needs: check-docker-images
    if: needs.check-docker-images.outputs.ci-build-exists != 'true'
    timeout-minutes: 30
    runs-on:
      - build-docker
      - in-service
    steps:
      - uses: tenstorrent/tt-metal/.github/actions/checkout-with-submodule-lfs@main
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Docker image and push to GHCR
        uses: docker/build-push-action@v6
        with:
          context: ${{ github.workspace }}
          file: dockerfile/Dockerfile
          target: dev
          push: true
          tags: ${{ needs.check-docker-images.outputs.ci-build-tag }}
          build-args: UBUNTU_VERSION=${{ inputs.version }}
          cache-to: type=inline
          pull: true
